{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh14620\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 Config maps and secrets in Kube\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Config Maps:\
\
a Kubernetes API object used to store non-sensitive configuration data in key-value pairs\
ConfigMaps enable you to manage configuration settings independently of the container images, allowing you to update configurations without redeploying the container images.\'a0store data as key-value pairs, where the keys are strings and the values can be strings or Base64-encoded binary data.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 vi configmap.yml\
\
apiVersion: v1\
kind: ConfigMap\
metadata:\
  name: testcm\
data:\
  db-port: "3306"\
\
kubectl apply -f configmap.yml\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
vi Deploy.yml\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 apiVersion: apps/v1\
kind: Deployment\
metadata:\
  name: webapp\
spec:\
  replicas: 2\
  selector:\
    matchLabels:\
      app: webapp\
  template:\
    metadata:\
      labels:\
        app: webapp\
    spec:\
      containers:\
        - name: webapp\
          image: awsdevops183/birthday\
          env:\
            - name: DB_PORT\
              valueFrom:\
                configMapKeyRef:\
                  name: testcm\
                  key: db-port\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
Enter pod :  kubectl exec -it webapp-8d88c67d7-48ffj  --/bin/bash \
                     cd /opt \
                     echo $DB_PORT\
                     cat db-port\
\
If we  change port number it still shows same port and conflict happens. Instead we use Volume Mounts.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Note : Container doesn\'92t allow changing the environment variable. We need to recreate the container. So Other way is Volume Mounts.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Using Volume mounts instead of env variables we use it as files.\
\
Vi deployment.yml:\
\
apiVersion: apps/v1\
kind: Deployment\
metadata:\
  name: webapp\
spec:\
  replicas: 2\
  selector:\
    matchLabels:\
      app: webapp\
  template:\
    metadata:\
      labels:\
        app: webapp\
    spec:\
      containers:\
        - name: webapp\
          image: awsdevops183/birthday\
          volumeMounts:\
            - name: db-connection\
              mountPath: /opt\
      volumes:\
        - name: db-connection\
          configMap:\
            name: testcm\
\
\
We can change port number in configmap.yml.  \'97> apply\
\
Enter pod :  kubectl exec -it webapp-8d88c67d7-48ffj  --/bin/bash \
                     cd /opt \
                     cat db-port\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\
\
SECRET:\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 kubectl create secret generic testsecret --from-literal=dbport="3306"\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 kubectl describe secret testsecret\
kubectl edit secret test secret\
\
This will encrypt base-64 data like this.\
data:\
  dbport: MzMwNg==\
\
\
To check weather it is 3306 secret or not:\
\
echo  MzMwNg==  | base64 \'97decode | more\
\
This will give a random password. To keep our own secrets:\
\
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\
\
ENCRYPT THE DATA IN ETCD AT REST :\
\
ETCD: It is a key value store will contains all cluster info including configurations, secrets and states.\
\
Step 1:\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 cat <<EOF > encryption-config.yaml\
apiVersion: apiserver.config.k8s.io/v1\
kind: EncryptionConfiguration\
resources:\
  - resources:\
      - secrets\
    providers:\
      - aescbc:\
          keys:\
            - name: key1\
              secret: $(head -c 32 /dev/urandom | base64)\
      - identity: \{\}\
EOF\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 Step 2:\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Update the API Server Configuration\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 edit /etc/kubernetes/manifests/kube-apiserver.yaml\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 spec:\
  containers:\
    - name: kube-apiserver\
      args:\
        - --encryption-provider-config=/etc/kubernetes/encryption-config.yaml\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
Step3: Mount the Encryption Config File: Make sure the encryption config file is mounted into the API server pod\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 volumeMounts:\
  - name: encryption-config\
    mountPath: /etc/kubernetes/encryption-config.yaml\
    readOnly: true\
\
volumes:\
  - name: encryption-config\
    hostPath:\
      path: /etc/kubernetes/encryption-config.yaml\
      type: File\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\
Step 4:\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Restart the API Server\
\
Re-encrypt Existing Secrets\
\
kubectl get secrets --all-namespaces -o json | kubectl replace -f -\
\
}
{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh14620\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Zomato App:\
\
Architecture:\
\
Git checkout \'97>  Jenkins  \'97> sonarqube  code quality analysis \'97 > OWASP file system \'97> Trivy (Image scan and vulnerabilities) \'97> docker image and push to docker hub \'97> docker scout  analysis (check vulnerabilities in image) \'97> docker container Deploy \'97> email notification \'97> zomato \'97 > Kube cluster \'97> Prometheus and Grafana\
\
\
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85..>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85..>\
\
\
sudo apt update\
sudo apt install -y docker.io\
sudo systemctl enable --now docker\
mkdir -p ~/.docker\
echo '\{ "experimental": "enabled" \}' > ~/.docker/config.json\
\
\
\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85..>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85..>\
\
Install Docker scout:\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\fs26 \cf0 sudo curl -sSL https://api.github.com/repos/docker/scout-cli/releases/latest \\\
| jq -r '.assets[] | select(.name | test("linux_amd64.tar.gz")) | .browser_download_url' \\\
| xargs curl -Lo docker-scout_linux_amd64.tar.gz\
\
tar -xzf docker-scout_linux_amd64.tar.gz\
sudo mv docker-scout /usr/local/bin/\
sudo chmod +x /usr/local/bin/docker-scout\
\

\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85..>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85.>\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85\'85..>\
\
squ_1be8ce020d8255c09e276a8b27d2e3db3ba1fcc7\
\
\
\
Git hub link:\
\
https://github.com/Sravyatirumala/Zomato-Project.git\
\
\
pipeline \{\
    agent any\
    tools \{\
        jdk 'jdk20'\
        nodejs 'nodeJS\'92\
    \}\
    environment \{\
        SCANNER_HOME=tool 'sonar-scanner'\
    \}\
    stages \{\
        stage ("clean workspace") \{\
            steps \{\
                cleanWs()\
            \}\
        \}\
        stage ("Git Checkout") \{\
            steps \{\
                git 'https://github.com/Sravyatirumala/Zomato-Project.git'\
            \}\
        \}\
        stage("Sonarqube Analysis")\{\
            steps\{\
                withSonarQubeEnv('sonar-server') \{\
                    sh ''' $SCANNER_HOME/bin/sonar-scanner\\\
                    -Dsonar.projectName=zomato \\\
                    -Dsonar.projectKey=zomato '''\
                \}\
            \}\
        \}\
        stage("Code Quality Gate")\{\
           steps \{\
                script \{\
                    waitForQualityGate abortPipeline: false, credentialsId:'Sonar-token' \
                \}\
            \} \
        \}\
        stage("Install NPM Dependencies") \{\
            steps \{\
                sh "npm install"\
            \}\
        \}\
        stage('OWASP FS SCAN') \{\
            steps \{\
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'\
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'\
            \}\
      \}\
        stage ("Trivy File Scan") \{\
            steps \{\
                sh "trivy fs . > trivy.txt"\
            \}\
        \}\
        stage ("Build Docker Image") \{\
            steps \{\
                sh "docker build -t zomato ."\
            \}\
        \}\
        stage ("Tag & Push to DockerHub") \{\
            steps \{\
                script \{\
                    withDockerRegistry(credentialsId: \'91Docker-creds\'92) \{\
                        sh "docker tag zomato sravyatirumala/zomato:latest "\
                        sh "docker push sravyatirumala/zomato:latest "\
                    \}\
                \}\
            \}\
        \}\
        stage('Docker Scout Image') \{\
            steps \{\
                script\{\
                    withCredentials([usernamePassword(credentialsId: 'Docker-creds', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) \{\
                   sh 'echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin'\
                   sh 'docker-scout quickview sravyatirumala/zomato:latest'\
                       \}\
                \}\
        \}\
        stage ("Deploy to Container") \{\
            steps \{\
                sh 'docker run -d --name zomato -p 3000:3000 sravyatirumala/zomato:latest'\
            \}\
        \}\
    \}\
     stage("Notify") \{\
    steps \{\
        script \{\
            emailext(\
                attachLog: true,\
                subject: "'$\{currentBuild.result\}'",\
                body: "...",\
                to: 'tvsravya95@gmail.com',\
                mimeType: 'text/html',\
                attachmentsPattern: 'trivy.txt'\
                 )\
             \}\
        \}\
    \}\
\}\
\
\
Same do it Kubernetes with prometheus and Grafana, Argued Monitoring tools.\
\
\
\
\
}